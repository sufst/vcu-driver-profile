#ifndef SCHEMA_BUILDER_H
#define SCHEMA_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef SCHEMA_READER_H
    #include "schema_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
    #include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
    #define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
    #define flatbuffers_extension "bin"
#endif

#define __Comms_CommandID_formal_args , Comms_CommandID_enum_t v0
#define __Comms_CommandID_call_args   , v0
__flatbuffers_build_scalar(flatbuffers_,
                           Comms_CommandID,
                           Comms_CommandID_enum_t)
#define __Comms_VariableID_formal_args , Comms_VariableID_enum_t v0
#define __Comms_VariableID_call_args   , v0
    __flatbuffers_build_scalar(flatbuffers_,
                               Comms_VariableID,
                               Comms_VariableID_enum_t)

#define __Comms_Version_formal_args , int8_t v0, int8_t v1, int8_t v2
#define __Comms_Version_call_args   , v0, v1, v2
        static inline Comms_Version_t* Comms_Version_assign(Comms_Version_t* p,
                                                            int8_t v0,
                                                            int8_t v1,
                                                            int8_t v2)
{
    p->a = v0;
    p->b = v1;
    p->c = v2;
    return p;
}
static inline Comms_Version_t* Comms_Version_copy(Comms_Version_t* p,
                                                  const Comms_Version_t* p2)
{
    p->a = p2->a;
    p->b = p2->b;
    p->c = p2->c;
    return p;
}
static inline Comms_Version_t*
Comms_Version_assign_to_pe(Comms_Version_t* p, int8_t v0, int8_t v1, int8_t v2)
{
    p->a = v0;
    p->b = v1;
    p->c = v2;
    return p;
}
static inline Comms_Version_t*
Comms_Version_copy_to_pe(Comms_Version_t* p, const Comms_Version_t* p2)
{
    p->a = p2->a;
    p->b = p2->b;
    p->c = p2->c;
    return p;
}
static inline Comms_Version_t* Comms_Version_assign_from_pe(Comms_Version_t* p,
                                                            int8_t v0,
                                                            int8_t v1,
                                                            int8_t v2)
{
    p->a = v0;
    p->b = v1;
    p->c = v2;
    return p;
}
static inline Comms_Version_t*
Comms_Version_copy_from_pe(Comms_Version_t* p, const Comms_Version_t* p2)
{
    p->a = p2->a;
    p->b = p2->b;
    p->c = p2->c;
    return p;
}
__flatbuffers_build_struct(flatbuffers_,
                           Comms_Version,
                           3,
                           1,
                           Comms_Version_file_identifier,
                           Comms_Version_type_identifier)
    __flatbuffers_define_fixed_array_primitives(flatbuffers_,
                                                Comms_Version,
                                                Comms_Version_t)

        static const flatbuffers_voffset_t __Comms_Command_required[]
    = {0};
typedef flatbuffers_ref_t Comms_Command_ref_t;
static Comms_Command_ref_t Comms_Command_clone(flatbuffers_builder_t* B,
                                               Comms_Command_table_t t);
__flatbuffers_build_table(flatbuffers_, Comms_Command, 5)

#define __Comms_Command_formal_args                                      \
    , Comms_CommandID_enum_t v0, Comms_VariableID_enum_t v1, int32_t v2, \
        flatbuffers_string_ref_t v3, Comms_Version_t *v4
#define __Comms_Command_call_args , v0, v1, v2, v3, v4
    static inline Comms_Command_ref_t
    Comms_Command_create(flatbuffers_builder_t* B __Comms_Command_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_,
                                 Comms_Command,
                                 Comms_Command_file_identifier,
                                 Comms_Command_type_identifier)

    __flatbuffers_build_scalar_field(
        0,
        flatbuffers_,
        Comms_Command_id,
        Comms_CommandID,
        Comms_CommandID_enum_t,
        1,
        1,
        INT8_C(0),
        Comms_Command) __flatbuffers_build_scalar_field(1,
                                                        flatbuffers_,
                                                        Comms_Command_var,
                                                        Comms_VariableID,
                                                        Comms_VariableID_enum_t,
                                                        1,
                                                        1,
                                                        INT8_C(0),
                                                        Comms_Command)
        __flatbuffers_build_scalar_field(2,
                                         flatbuffers_,
                                         Comms_Command_val,
                                         flatbuffers_int32,
                                         int32_t,
                                         4,
                                         4,
                                         INT32_C(0),
                                         Comms_Command)
            __flatbuffers_build_string_field(3,
                                             flatbuffers_,
                                             Comms_Command_config_name,
                                             Comms_Command)
                __flatbuffers_build_struct_field(4,
                                                 flatbuffers_,
                                                 Comms_Command_config_version,
                                                 Comms_Version,
                                                 3,
                                                 1,
                                                 Comms_Command)

                    static inline Comms_Command_ref_t
    Comms_Command_create(flatbuffers_builder_t* B __Comms_Command_formal_args)
{
    if (Comms_Command_start(B) || Comms_Command_val_add(B, v2)
        || Comms_Command_config_name_add(B, v3) || Comms_Command_id_add(B, v0)
        || Comms_Command_var_add(B, v1)
        || Comms_Command_config_version_add(B, v4))
    {
        return 0;
    }
    return Comms_Command_end(B);
}

static Comms_Command_ref_t Comms_Command_clone(flatbuffers_builder_t* B,
                                               Comms_Command_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Comms_Command_start(B) || Comms_Command_val_pick(B, t)
        || Comms_Command_config_name_pick(B, t) || Comms_Command_id_pick(B, t)
        || Comms_Command_var_pick(B, t)
        || Comms_Command_config_version_pick(B, t))
    {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Comms_Command_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_BUILDER_H */
