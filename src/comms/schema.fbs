// IDL Schema for Communication protocol
// This provides the serialisation and deserialisation for the protocol to change VCU parameters
// Supported commands:
//    - open                                  -- open a connection
//    - close                                 -- close a connection
//    - set <vals>                            -- set the values of all variables
//    - get                                   -- get the values of all variables
//    - ret <vals>                            -- return (response) with the <val> for <var>
//    - err                                   -- an error occurred executing the last command
//    - suc                                   -- the last command executed successfully 
//    - save <config_name> <config_version>   -- move the current config to EEPROM

namespace Comms;

// Store command IDs
enum CommandID : byte {
  OPEN,
  CLOSE,
  SET,
  GET,
  RET,
  ERR,
  RES,
  SAVE
}

struct VariableVals {
  torque_map_val : [uint8 : 2048];
  inverter_mode_val: CommandID;
  disable_torque_requests_val : bool;
  apps_1_adc_min_val : uint16;
  apps_1_adc_max_val : uint16;
  apps_2_adc_min_val : uint16; 
  apps_2_adc_max_val : uint16;
  bps_adc_min_val : uint16;
  bps_adc_max_val : uint16;
  bps_fully_pressed_threshold_val : uint32;
  enable_lapsim_testbench_val: bool;      
  lapsim_testbench_laps_val: uint8;        
}

enum InverterMode : byte {
  TORQUE,
  SPEED,
}

// Version are in the format a.b.c
// NOTE: no part of the version number can have leading zeros as they will be lost
struct Version {
  a:uint8;
  b:uint8;
  c:uint8;
}

table Command {
  // All these fields are technically "optional" but different commands require different parameters
  id : CommandID;
  vals : VariableVals;
  config_name : string;
  config_version : Version;
}
