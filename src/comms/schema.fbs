// IDL Schema for Communication protocol
// This provides the serialisation and deserialisation for the protocol to change VCU parameters
// Supported commands:
//    - set <var> <val>  -- set the <var> variable to <val>
//    - get <var>        -- get the value of <var>
//    - res <var> <val>  -- return (response) with the <val> for <var>
//    - save             -- move the current config to EEPROM

namespace Comms;


// Store command IDs
enum CommandID : byte {
  OPEN,
  CLOSE,
  SET,
  GET,
  RES,
  SAVE
}

enum VariableID : byte {
//Variable Name                    Type    - Size 
  config_name,                  // String
  config_version,               // String
  config_last_revision_date,    // String
  torque_map,                   // Table   - 2048 Bytes
  inverter_mode,                // Enum    - 1 Bytes
  disable_torque_requests,      // Boolean - 1 Bytes
  apps_1_adc_min,               // Int     - 2 Bytes
  apps_1_adc_max,               // Int     - 2 Bytes
  apps_2_adc_min,               // Int     - 2 Bytes 
  apps_2_adc_max,               // Int     - 2 Bytes
  bps_adc_min,                  // Int     - 2 Bytes
  bps_adc_max,                  // Int     - 2 Bytes
  bps_fully_pressed_threshold,  // Float   - 4 Bytes
  enable_lapsim_testbench,      // Boolean - 1 Bytes
  lapsim_testbench_laps         // Int     - 1 Bytes
}

table Command {
  id : CommandID;
  var : VariableID; // This field is "optional" - obviously it some commands need it
  val : int32; // This field is also "optional"^^^
}
